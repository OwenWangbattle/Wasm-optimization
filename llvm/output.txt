; *** IR Dump After Annotation2MetadataPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %2) #3
  store i32 5, ptr %2, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %3) #3
  store i32 1, ptr %3, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %4) #3
  store i32 1, ptr %4, align 4, !tbaa !2
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %4, align 4, !tbaa !2
  %7 = load i32, ptr %2, align 4, !tbaa !2
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !2
  %11 = load i32, ptr %3, align 4, !tbaa !2
  %12 = mul nsw i32 %11, %10
  store i32 %12, ptr %3, align 4, !tbaa !2
  %13 = load i32, ptr %4, align 4, !tbaa !2
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %4, align 4, !tbaa !2
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %2, align 4, !tbaa !2
  %17 = load i32, ptr %3, align 4, !tbaa !2
  %18 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %16, i32 noundef %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr %4) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %3) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %2) #3
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After ForceFunctionAttrsPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %2) #3
  store i32 5, ptr %2, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %3) #3
  store i32 1, ptr %3, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %4) #3
  store i32 1, ptr %4, align 4, !tbaa !2
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %4, align 4, !tbaa !2
  %7 = load i32, ptr %2, align 4, !tbaa !2
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !2
  %11 = load i32, ptr %3, align 4, !tbaa !2
  %12 = mul nsw i32 %11, %10
  store i32 %12, ptr %3, align 4, !tbaa !2
  %13 = load i32, ptr %4, align 4, !tbaa !2
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %4, align 4, !tbaa !2
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %2, align 4, !tbaa !2
  %17 = load i32, ptr %3, align 4, !tbaa !2
  %18 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %16, i32 noundef %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr %4) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %3) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %2) #3
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After AssignmentTrackingPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %2) #3
  store i32 5, ptr %2, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %3) #3
  store i32 1, ptr %3, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %4) #3
  store i32 1, ptr %4, align 4, !tbaa !2
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %4, align 4, !tbaa !2
  %7 = load i32, ptr %2, align 4, !tbaa !2
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !2
  %11 = load i32, ptr %3, align 4, !tbaa !2
  %12 = mul nsw i32 %11, %10
  store i32 %12, ptr %3, align 4, !tbaa !2
  %13 = load i32, ptr %4, align 4, !tbaa !2
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %4, align 4, !tbaa !2
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %2, align 4, !tbaa !2
  %17 = load i32, ptr %3, align 4, !tbaa !2
  %18 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %16, i32 noundef %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr %4) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %3) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %2) #3
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After InferFunctionAttrsPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %2) #3
  store i32 5, ptr %2, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %3) #3
  store i32 1, ptr %3, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %4) #3
  store i32 1, ptr %4, align 4, !tbaa !2
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %4, align 4, !tbaa !2
  %7 = load i32, ptr %2, align 4, !tbaa !2
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !2
  %11 = load i32, ptr %3, align 4, !tbaa !2
  %12 = mul nsw i32 %11, %10
  store i32 %12, ptr %3, align 4, !tbaa !2
  %13 = load i32, ptr %4, align 4, !tbaa !2
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %4, align 4, !tbaa !2
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %2, align 4, !tbaa !2
  %17 = load i32, ptr %3, align 4, !tbaa !2
  %18 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %16, i32 noundef %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr %4) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %3) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %2) #3
  ret i32 0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After CoroEarlyPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %2) #3
  store i32 5, ptr %2, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %3) #3
  store i32 1, ptr %3, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %4) #3
  store i32 1, ptr %4, align 4, !tbaa !2
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %4, align 4, !tbaa !2
  %7 = load i32, ptr %2, align 4, !tbaa !2
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !2
  %11 = load i32, ptr %3, align 4, !tbaa !2
  %12 = mul nsw i32 %11, %10
  store i32 %12, ptr %3, align 4, !tbaa !2
  %13 = load i32, ptr %4, align 4, !tbaa !2
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %4, align 4, !tbaa !2
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %2, align 4, !tbaa !2
  %17 = load i32, ptr %3, align 4, !tbaa !2
  %18 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %16, i32 noundef %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr %4) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %3) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %2) #3
  ret i32 0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After LowerExpectIntrinsicPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %2) #3
  store i32 5, ptr %2, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %3) #3
  store i32 1, ptr %3, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %4) #3
  store i32 1, ptr %4, align 4, !tbaa !2
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %4, align 4, !tbaa !2
  %7 = load i32, ptr %2, align 4, !tbaa !2
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !2
  %11 = load i32, ptr %3, align 4, !tbaa !2
  %12 = mul nsw i32 %11, %10
  store i32 %12, ptr %3, align 4, !tbaa !2
  %13 = load i32, ptr %4, align 4, !tbaa !2
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %4, align 4, !tbaa !2
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %2, align 4, !tbaa !2
  %17 = load i32, ptr %3, align 4, !tbaa !2
  %18 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %16, i32 noundef %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr %4) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %3) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %2) #3
  ret i32 0
}
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr %2) #3
  store i32 5, ptr %2, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %3) #3
  store i32 1, ptr %3, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0(i64 4, ptr %4) #3
  store i32 1, ptr %4, align 4, !tbaa !2
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %4, align 4, !tbaa !2
  %7 = load i32, ptr %2, align 4, !tbaa !2
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !2
  %11 = load i32, ptr %3, align 4, !tbaa !2
  %12 = mul nsw i32 %11, %10
  store i32 %12, ptr %3, align 4, !tbaa !2
  %13 = load i32, ptr %4, align 4, !tbaa !2
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %4, align 4, !tbaa !2
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %2, align 4, !tbaa !2
  %17 = load i32, ptr %3, align 4, !tbaa !2
  %18 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %16, i32 noundef %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr %4) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %3) #3
  call void @llvm.lifetime.end.p0(i64 4, ptr %2) #3
  ret i32 0
}
; *** IR Dump After SROAPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After EarlyCSEPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After CallSiteSplittingPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After OpenMPOptPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After IPSCCPPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After CalledValuePropagationPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After PromotePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp sle i32 %3, 5
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After AlwaysInlinerPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After RequireAnalysisPass<llvm::GlobalsAA, llvm::Module> on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After RequireAnalysisPass<llvm::ProfileSummaryAnalysis, llvm::Module> on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
; *** IR Dump After InlinerPass on (main) ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After PostOrderFunctionAttrsPass on (main) ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After ArgumentPromotionPass on (main) ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After OpenMPOptCGSCCPass on (main) ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After SROAPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After EarlyCSEPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After SpeculativeExecutionPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After JumpThreadingPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After CorrelatedValuePropagationPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After AggressiveInstCombinePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After LibCallsShrinkWrapPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After TailCallElimPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %2, %3
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After ReassociatePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %3, %2
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After ConstraintEliminationPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %3, %2
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After LoopSimplifyPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %3, %2
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %2)
  ret i32 0
}
; *** IR Dump After LCSSAPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %3, %2
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

8:                                                ; preds = %1
  %9 = phi i32 [ %2, %1 ]
  %10 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %9)
  ret i32 0
}
; *** IR Dump After LoopInstSimplifyPass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %3, %2
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

; Exit blocks
8:                                                ; preds = %1
  %9 = phi i32 [ %2, %1 ]
  %10 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %9)
  ret i32 0
; *** IR Dump After LoopSimplifyCFGPass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %3, %2
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

; Exit blocks
8:                                                ; preds = %1
  %9 = phi i32 [ %2, %1 ]
  %10 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %9)
  ret i32 0
; *** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %5, %0
  %2 = phi i32 [ 1, %0 ], [ %6, %5 ]
  %3 = phi i32 [ 1, %0 ], [ %7, %5 ]
  %4 = icmp ult i32 %3, 6
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = mul nsw i32 %3, %2
  %7 = add nuw nsw i32 %3, 1
  br label %1, !llvm.loop !2

; Exit blocks
8:                                                ; preds = %1
  %9 = phi i32 [ %2, %1 ]
  %10 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %9)
  ret i32 0
; *** IR Dump After LoopRotatePass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %5, 6
  br i1 %6, label %1, label %7, !llvm.loop !2

; Exit blocks
7:                                                ; preds = %1
  %8 = phi i32 [ %4, %1 ]
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %8)
  ret i32 0
; *** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %5, 6
  br i1 %6, label %1, label %7, !llvm.loop !2

; Exit blocks
7:                                                ; preds = %1
  %8 = phi i32 [ %4, %1 ]
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %8)
  ret i32 0
; *** IR Dump After SimpleLoopUnswitchPass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %5, 6
  br i1 %6, label %1, label %7, !llvm.loop !2

; Exit blocks
7:                                                ; preds = %1
  %8 = phi i32 [ %4, %1 ]
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %8)
  ret i32 0
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %5, 6
  br i1 %6, label %1, label %7, !llvm.loop !2

7:                                                ; preds = %1
  %8 = phi i32 [ %4, %1 ]
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %8)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %2, 5
  br i1 %6, label %1, label %7, !llvm.loop !2

7:                                                ; preds = %1
  %8 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %4)
  ret i32 0
}
; *** IR Dump After LoopSimplifyPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %2, 5
  br i1 %6, label %1, label %7, !llvm.loop !2

7:                                                ; preds = %1
  %8 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %4)
  ret i32 0
}
; *** IR Dump After LCSSAPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %2, 5
  br i1 %6, label %1, label %7, !llvm.loop !2

7:                                                ; preds = %1
  %8 = phi i32 [ %4, %1 ]
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %8)
  ret i32 0
}
; *** IR Dump After LoopIdiomRecognizePass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %5, %1 ]
  %3 = phi i32 [ 1, %0 ], [ %4, %1 ]
  %4 = mul nsw i32 %2, %3
  %5 = add nuw nsw i32 %2, 1
  %6 = icmp ult i32 %2, 5
  br i1 %6, label %1, label %7, !llvm.loop !2

; Exit blocks
7:                                                ; preds = %1
  %8 = phi i32 [ %4, %1 ]
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef %8)
  ret i32 0
; *** IR Dump After IndVarSimplifyPass on <unnamed loop> ***

; Preheader:
  br label %1

; Loop:
1:                                                ; preds = %0, %1
  %2 = phi i32 [ 1, %0 ], [ %3, %1 ]
  %3 = add nuw nsw i32 %2, 1
  br i1 false, label %1, label %4, !llvm.loop !2

; Exit blocks
4:                                                ; preds = %1
  %5 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
; *** IR Dump After LoopDeletionPass on <unnamed loop> (invalidated) ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0
  %2 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #1

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }
attributes #1 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After SROAPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0
  %2 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After VectorCombinePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0
  %2 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After MergedLoadStoreMotionPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  br label %1

1:                                                ; preds = %0
  %2 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After GVNPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After SCCPPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After BDCEPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After JumpThreadingPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After CorrelatedValuePropagationPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After ADCEPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After MemCpyOptPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After DSEPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After MoveAutoInitPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopSimplifyPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LCSSAPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After CoroElidePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nounwind
define hidden i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After PostOrderFunctionAttrsPass on (main) ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After RequireAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis, llvm::Function> on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After CoroSplitPass on (main) ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After DeadArgumentEliminationPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After CoroCleanupPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After EliminateAvailableExternallyPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After ReversePostOrderFunctionAttrsPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After RecomputeGlobalsAAPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After Float2IntPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LowerConstantIntrinsicsPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After ControlHeightReductionPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopSimplifyPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LCSSAPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopDistributePass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InjectTLIMappings on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopVectorizePass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InferAlignmentPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopLoadEliminationPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After SLPVectorizerPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After VectorCombinePass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopUnrollPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After WarnMissedTransformationsPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After SROAPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InferAlignmentPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InstCombinePass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopSimplifyPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LCSSAPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After AlignmentFromAssumptionsPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After LoopSinkPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After InstSimplifyPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After DivRemPairsPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After TailCallElimPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After SimplifyCFGPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
; *** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After ConstantMergePass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After CGProfilePass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After RelLookupTableConverterPass on [module] ***
; ModuleID = 'test1.c'
source_filename = "test1.c"
target datalayout = "e-m:e-p:32:32-p10:8:8-p20:8:8-i64:64-n32:64-S128-ni:1:10:20"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [23 x i8] c"Factorial of %d is %d\0A\00", align 1

@__main_void = hidden alias i32 (), ptr @main

; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #0

attributes #0 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+mutable-globals,+sign-ext" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 18.1.2-wasi-sdk (https://github.com/llvm/llvm-project 26a1d6601d727a96f4301d0d8647b5a42760ae0c)"}
; *** IR Dump After AnnotationRemarksPass on main ***
; Function Attrs: nofree nounwind
define hidden noundef i32 @main() #0 {
  %1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef 5, i32 noundef 120)
  ret i32 0
}
